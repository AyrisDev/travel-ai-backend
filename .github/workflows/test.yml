name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for MongoDB
      run: |
        until mongosh "mongodb://testuser:testpass@localhost:27017/admin" --eval "print(\"MongoDB is ready\")" > /dev/null 2>&1; do
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Wait for Redis
      run: |
        until redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/travel_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-for-ci
        GEMINI_API_KEY: test-gemini-key
        ENCRYPTION_KEY: test-encryption-key-32-characters

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/travel_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-for-ci
        GEMINI_API_KEY: test-gemini-key
        ENCRYPTION_KEY: test-encryption-key-32-characters

    - name: Run e2e tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/travel_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-for-ci
        GEMINI_API_KEY: test-gemini-key
        ENCRYPTION_KEY: test-encryption-key-32-characters

    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/travel_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-for-ci
        GEMINI_API_KEY: test-gemini-key
        ENCRYPTION_KEY: test-encryption-key-32-characters

    - name: Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/travel_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-for-ci
        GEMINI_API_KEY: test-gemini-key
        ENCRYPTION_KEY: test-encryption-key-32-characters

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Save test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency vulnerability scan
      run: npx auditjs ossi --username ${{ secrets.AUDITJS_USERNAME }} --password ${{ secrets.AUDITJS_PASSWORD }}
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Test production build
      run: |
        npm start &
        SERVER_PID=$!
        sleep 10
        curl -f http://localhost:3000/api/v1/monitoring/health || exit 1
        kill $SERVER_PID
      env:
        NODE_ENV: production
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/travel_prod_test
        JWT_SECRET: production-test-secret
        GEMINI_API_KEY: test-key

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: echo "Deploying to staging environment..."
      # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: echo "Deploying to production environment..."
      # Add your production deployment commands here